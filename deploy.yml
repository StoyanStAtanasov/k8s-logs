apiVersion: v1
kind: ServiceAccount
metadata:
  name: k8s-logs-sa
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: k8s-logs-cluster-reader
rules:
  - apiGroups: [""]
    resources: ["pods", "pods/log"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: k8s-logs-cluster-binding
subjects:
  - kind: ServiceAccount
    name: k8s-logs-sa
    namespace: default
roleRef:
  kind: ClusterRole
  name: k8s-logs-cluster-reader
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: k8s-logs
spec:
  replicas: 1
  selector:
    matchLabels:
      app: k8s-logs
  template:
    metadata:
      labels:
        app: k8s-logs
    spec:
      serviceAccountName: k8s-logs-sa
      containers:
        - name: app
          image: ghcr.io/stoyanstatanasov/k8s-logs:v1.1.0
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 80
          livenessProbe:
            httpGet:
              path: /heartbeat
              port: http
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 2
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 2
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /health
              port: http
            failureThreshold: 30
            periodSeconds: 10
          resources:
            requests:
              memory: "128Mi"
              cpu: "250m"
            limits:
              memory: "256Mi"
              cpu: "500m"
---
apiVersion: v1
kind: Service
metadata:
  name: k8s-logs
spec:
  type: NodePort
  selector:
    app: k8s-logs
  ports:
    - name: http
      port: 80
      targetPort: http
      nodePort: 30080
